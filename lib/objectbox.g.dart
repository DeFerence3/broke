// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'database/DatabaseEntities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 9094461339207814114),
      name: 'Clusterr',
      lastPropertyId: const IdUid(4, 5228924312086398061),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3556270179746812826),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2993590698946556859),
            name: 'cluster',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1204738883684015815),
            name: 'initbud',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5228924312086398061),
            name: 'datetime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'expenses', srcEntity: 'Expenses', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 3268407778497839794),
      name: 'Expenses',
      lastPropertyId: const IdUid(4, 3849589936849286682),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7854579634466944778),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6367386720829240404),
            name: 'expense',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7926996706003173584),
            name: 'amnt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3849589936849286682),
            name: 'clusterrId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4357024431922575771),
            relationTarget: 'Clusterr')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3268407778497839794),
      lastIndexId: const IdUid(1, 4357024431922575771),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Clusterr: EntityDefinition<Clusterr>(
        model: _entities[0],
        toOneRelations: (Clusterr object) => [],
        toManyRelations: (Clusterr object) => {
              RelInfo<Expenses>.toOneBacklink(
                      4, object.id, (Expenses srcObject) => srcObject.clusterr):
                  object.expenses
            },
        getId: (Clusterr object) => object.id,
        setId: (Clusterr object, int id) {
          object.id = id;
        },
        objectToFB: (Clusterr object, fb.Builder fbb) {
          final clusterOffset = fbb.writeString(object.cluster);
          final initbudOffset =
              object.initbud == null ? null : fbb.writeString(object.initbud!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, clusterOffset);
          fbb.addOffset(2, initbudOffset);
          fbb.addInt64(3, object.datetime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Clusterr(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cluster: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              initbud: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              datetime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          InternalToManyAccess.setRelInfo<Clusterr>(
              object.expenses,
              store,
              RelInfo<Expenses>.toOneBacklink(
                  4, object.id, (Expenses srcObject) => srcObject.clusterr));
          return object;
        }),
    Expenses: EntityDefinition<Expenses>(
        model: _entities[1],
        toOneRelations: (Expenses object) => [object.clusterr],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.id,
        setId: (Expenses object, int id) {
          object.id = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final expenseOffset = fbb.writeString(object.expense);
          final amntOffset = fbb.writeString(object.amnt);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, expenseOffset);
          fbb.addOffset(2, amntOffset);
          fbb.addInt64(3, object.clusterr.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              expense: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              amnt: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.clusterr.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.clusterr.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Clusterr] entity fields to define ObjectBox queries.
class Clusterr_ {
  /// see [Clusterr.id]
  static final id = QueryIntegerProperty<Clusterr>(_entities[0].properties[0]);

  /// see [Clusterr.cluster]
  static final cluster =
      QueryStringProperty<Clusterr>(_entities[0].properties[1]);

  /// see [Clusterr.initbud]
  static final initbud =
      QueryStringProperty<Clusterr>(_entities[0].properties[2]);

  /// see [Clusterr.datetime]
  static final datetime =
      QueryIntegerProperty<Clusterr>(_entities[0].properties[3]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// see [Expenses.id]
  static final id = QueryIntegerProperty<Expenses>(_entities[1].properties[0]);

  /// see [Expenses.expense]
  static final expense =
      QueryStringProperty<Expenses>(_entities[1].properties[1]);

  /// see [Expenses.amnt]
  static final amnt = QueryStringProperty<Expenses>(_entities[1].properties[2]);

  /// see [Expenses.clusterr]
  static final clusterr =
      QueryRelationToOne<Expenses, Clusterr>(_entities[1].properties[3]);
}
